buildscript {
    ext{   //build.gradle에서 사용하는 전역변수를 설정하겠다는 의미
        springBootVersion = '2.1.7.RELEASE' //spring-boot-gradle-plugin라는
        // 스프링부트그레이들 플러그인의 2.1.7RELEASE를 의존성으로 받겠다.
    }

    repositories {  //각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지 정한다.
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin : 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'     //스프링부트의 의존성을 관리해주는 플러그인!!!중요!!

group 'com.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation('org.projectlombok:maven-lombok-plugin:0.9.3.1')
    //스프링부트용 Spring Data Jpa 추상화 라이브러리
    //스프링부트 버전에 맞춰 자동으로 JAP 관련 라이브러리들의 버전을 관리해줌.
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    //인메모리 관계형 데이터베이스, 별도의 설치x, 의존성만으로 관리할 수 있음.
    //메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화된다는 점을 이용하여 테스트 용도로 많이 사용됨.
    implementation('com.h2database:h2:')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation('org.springframework.boot:spring-boot-starter-mustache')
    //소셜 로그인 등 클라이언트 입장에서 소셜 기능 구현 시 필요한 의존성
    implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
    //데이터베이스를 세션 저장소로 사용하기 위해 추가
    implementation('org.springframework.session:spring-session-jdbc:')

}

/*dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}*/

test {
    useJUnitPlatform()
}





